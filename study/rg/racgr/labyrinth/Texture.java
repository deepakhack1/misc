package racgr.labyrinth;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import org.lwjgl.BufferUtils;
import org.lwjgl.LWJGLException;
import org.lwjgl.devil.IL;
import org.lwjgl.devil.ILU;
import org.lwjgl.opengl.GL11;
 
/**
 * <p>
 * Simple Texture containing the texture ID generated by OGL
 * and various attributes. Can be called upon to bind and paint itself.
 * <br/>
 * This is a modified version of the Texture class from: org.lwjgl.examples.spaceinvaders.Texture.
 * </p>
 * @author Brian Matzon <brian@matzon.dk>
 * @author Janoš Vidali 63040303
 * @see <a href="http://lwjgl.org/wiki/doku.php/lwjgl/tutorials/devil/loadingtextures">LWJGL tutorials: Loading textures</a>
 */
public class Texture {
 
  /** Texture id for this image (OpenGL). */
  private int textureID;
 
  /** Width of this image. */
  private int width;
 
  /** Height of this image. */
  private int height;
 
  /** Width ratio. */
  private float	widthRatio;
 
  /** Height ratio. */
  private float	heightRatio;
 
  /** Texture width. */
  private int textureWidth;
 
  /** Texture height. */
  private int textureHeight;
 
  static {
	try {
	  IL.create();
	} 
	catch (LWJGLException e) {
	}
  }
  
  /**
   * Creates a new Texture.
   * 
   * @param textureID Texture ID
   * @param width Width of image
   * @param height Height of image
   */
  public Texture(int textureID, int width, int height) {
    this(textureID, width, height, 1.0f, 1.0f, width, height);
  }
 
  /**
   * Creates a new Texture.
   * 
   * @param textureID Texture ID
   * @param width Width of image
   * @param height Height of image
   * @param widthRatio Ratio of texture width
   * @param heightRatio Ratio of texture height
   * @param textureWidth Actual width of texture
   * @param textureHeight Actual height of texture
   */
  public Texture(int textureID, int width, int height, float widthRatio, float heightRatio, int textureWidth, int textureHeight) {
    this.textureID = textureID;
    this.width = width;
    this.height = height;
    this.widthRatio = widthRatio;
    this.heightRatio = heightRatio;
    this.textureWidth = textureWidth;
    this.textureHeight = textureHeight;
  }
 
  /**
   * Destroys this Texture, reclaiming all resources.
   */
  public void destroy() {
    IntBuffer scratch = BufferUtils.createIntBuffer(1);
    scratch.put(0, textureID);
    GL11.glDeleteTextures(scratch);
  }
 
  /**
   * Gets texture ID.
   *
   * @return Texture ID for this image.
   */
  public int getTextureID() {
    return textureID;
  }
  
  /**
   * Gets image height.
   *
   * @return height of image.
   */
  public int getHeight() {
    return height;
  }
  
  /**
   * Gets image width.
   *
   * @return width of image.
   */
  public int getWidth() {
    return width;
  }
  
  /**
   * Binds this image.
   */
  public void bind() {
    GL11.glBindTexture(GL11.GL_TEXTURE_2D, textureID);
  }
  
  /**
   * Renders this image to a quad. The image will bind itself first.
   */
  public void render() {
    bind();
    GL11.glBegin(GL11.GL_QUADS); {
      GL11.glTexCoord2f(0.0f, 0.0f);              GL11.glVertex2i(0, 0);
      GL11.glTexCoord2f(widthRatio, 0.0f);        GL11.glVertex2i(width, 0);
      GL11.glTexCoord2f(widthRatio, heightRatio); GL11.glVertex2i(width, height);
      GL11.glTexCoord2f(0.0f, heightRatio);       GL11.glVertex2i(0, height);
    }
    GL11.glEnd();
  }

  /**
   * Returns a string representation of the image.
   */
  public String toString() {
    return "Texture [" + textureID + ", " + width + ", " + height + ", " + 
    textureWidth + ", " + textureHeight + ", " + widthRatio + ", " + heightRatio + "]";
  }
  
  /**
   * Get the closest greater power of 2 to the fold number.
   * 
   * @param fold The target number
   * @return The power of 2
   */
  public static int getNextPowerOfTwo(int fold) {
	  int pow = 2;
	  while (pow < fold) {
		pow *= 2;
	  }
	  return pow;
  }
 
  /**
   * Loads the named texture from the classpath.
   * 
   * @param name Name of texture to load
   * @param flip Whether to flip image
   * @return Loaded texture or null
   */
  public static Texture loadTexture(String name, boolean flip) {
	  Texture texture = null;
	  ByteBuffer imageData = null;
	  int ilImageHandle;
	  int oglImageHandle;
	  IntBuffer scratch = BufferUtils.createIntBuffer(1);
	 
	  IL.ilGenImages(scratch);
	  IL.ilBindImage(scratch.get(0));
	  ilImageHandle = scratch.get(0);
		
	  try {
		  if(!IL.ilLoadFromURL(IL.class.getClassLoader().getResource(name))) {
			return null;
		  }
	  } catch (IOException e) {
		  return null;
	  }
	 
	  IL.ilConvertImage(IL.IL_RGBA, IL.IL_BYTE);
	 
	  if(flip) {
		ILU.iluFlipImage();
	  }
	 
	  int width = IL.ilGetInteger(IL.IL_IMAGE_WIDTH);
	  int height = IL.ilGetInteger(IL.IL_IMAGE_HEIGHT);
	  int textureWidthSize = getNextPowerOfTwo(width);
	  int textureHeightSize = getNextPowerOfTwo(height);
	 
	  if (textureWidthSize != width || textureHeightSize != height) {
		imageData = BufferUtils.createByteBuffer(textureWidthSize * textureHeightSize * 4);
		IL.ilCopyPixels(0, 0, 0, textureWidthSize, textureHeightSize, 1, IL.IL_RGBA, IL.IL_BYTE, imageData);
	  } else {
		imageData = IL.ilGetData();
	  }
	 
	  GL11.glGenTextures(scratch);
	  GL11.glBindTexture(GL11.GL_TEXTURE_2D, scratch.get(0));
	  oglImageHandle = scratch.get(0);
	  
	  GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
	  GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
	  GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGBA, textureWidthSize, textureHeightSize, 
						0, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, imageData);
	 
	  if (textureWidthSize != width || textureHeightSize != height) {
		texture = new Texture(oglImageHandle, width, height, (width / (float) textureWidthSize), 
							 (height / (float) textureHeightSize), textureWidthSize, textureHeightSize);
	  } else {
		texture = new Texture(oglImageHandle, width, height);
	  }
	 
	  scratch.put(0, ilImageHandle);
	  IL.ilDeleteImages(scratch);
	  
	  GL11.glBindTexture(GL11.GL_TEXTURE_2D, 0);
	 
	  return texture;
  }
  
}
